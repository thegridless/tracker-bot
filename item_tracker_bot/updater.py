# -*- coding: utf-8 -*-
"""
–ú–æ–¥—É–ª—å –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–µ–¥–º–µ—Ç–∞—Ö –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–æ–≤.
"""
import time
import logging
import telebot

from db.connector import CSMarketDatabase
from db.models import Item
from parser.parser import CSMarketParser
from config import config

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
db = CSMarketDatabase(db_path=config.DATABASE_PATH)

def _generate_report() -> str:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ë–î.
    """
    items_data = db.get_all_items()
    if not items_data:
        return ""

    total_purchase_price = 0
    total_current_price = 0
    report_parts = ["<b>üìä –°–≤–æ–¥–∫–∞ –ø–æ –ø—Ä–∏–±—ã–ª–∏:</b>\n"]

    for item_data in items_data:
        item = Item.from_dict(item_data)
        purchase_price = item.purchase_price or 0
        current_price = item.current_price or 0
        total_purchase_price += purchase_price
        total_current_price += current_price
        absolute_profit, percent_profit = item.calculate_profit()
        sign = "üü¢" if absolute_profit >= 0 else "üî¥"
        
        report_parts.append(
            f"\n<b>{item.title}</b>: {sign} ${absolute_profit:.2f} ({percent_profit:.2f}%)"
        )
    
    total_profit = total_current_price - total_purchase_price
    total_profit_percent = (total_profit / total_purchase_price * 100) if total_purchase_price > 0 else 0
    total_sign = "üü¢" if total_profit >= 0 else "üî¥"

    summary = (
        f"\n\n<b>üìà –û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å: {total_sign} ${total_profit:.2f} ({total_profit_percent:.2f}%)</b>"
    )
    report_parts.append(summary)
    
    return "\n".join(report_parts)


def periodic_updater(bot: telebot.TeleBot, interval_hours: int):
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ–Ω–æ–≤–æ–≥–æ –ø–æ—Ç–æ–∫–∞.
    –û–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç—á–µ—Ç.
    
    Args:
        bot (telebot.TeleBot): –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞.
        interval_hours (int): –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏ –≤ —á–∞—Å–∞—Ö.
    """
    logging.info("üöÄ –§–æ–Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—É—â–µ–Ω.")
    while True:
        try:
            logging.info("–ù–∞—á–∏–Ω–∞—é —Ü–∏–∫–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω...")
            items_to_update = db.get_all_items()

            if not items_to_update:
                logging.info("–ù–µ—Ç –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è. –°–ª–µ–¥—É—é—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ 4 —á–∞—Å–∞.")
            else:
                with CSMarketParser() as parser:
                    for item_data in items_to_update:
                        try:
                            logging.info(f"–û–±–Ω–æ–≤–ª—è—é {item_data['title']}...")
                            parsed_data = parser.parse_item_page(item_data['url'])
                            if parsed_data and parsed_data.get('title'):
                                db.upsert_item(parsed_data)
                                time.sleep(5) # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                            else:
                                logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è {item_data['url']}")
                        except Exception as e:
                            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–µ–¥–º–µ—Ç–∞ {item_data.get('title')}: {e}")
                
                logging.info("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç—á–µ—Ç...")
                report = _generate_report()
                if report and config.ADMIN_ID:
                    bot.send_message(
                        config.ADMIN_ID,
                        report,
                        disable_notification=True
                    )
                    logging.info("–û—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")

        except Exception as e:
            logging.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ: {e}")

        # –ü–∞—É–∑–∞
        logging.info(f"–°–ª–µ–¥—É—é—â–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ {interval_hours} —á–∞—Å(–∞/–æ–≤).")
        time.sleep(interval_hours * 60 * 60) 