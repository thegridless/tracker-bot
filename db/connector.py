import sqlite3
import json
from typing import Dict, Any, List, Optional
from datetime import datetime


class CSMarketDatabase:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö CS:GO –º–∞—Ä–∫–µ—Ç–∞"""
    
    def __init__(self, db_path: str = 'cs_market.db'):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        
        Args:
            db_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        """
        self.db_path = db_path
        self.create_tables()
    
    def create_tables(self):
        """–°–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()
            
            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–æ–≤
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS items (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    url TEXT UNIQUE NOT NULL,
                    title TEXT NOT NULL,
                    current_price REAL,
                    avg_price REAL,
                    sales_count INTEGER,
                    purchase_price REAL DEFAULT 0,
                    profit_percent REAL DEFAULT 0,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            ''')
            
            # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ –ø–æ URL
            cursor.execute('''
                CREATE INDEX IF NOT EXISTS idx_url ON items(url)
            ''')
            
            conn.commit()
            print("–¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
    
    def add_item(self, item_data: Dict[str, Any]) -> bool:
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–π –ø—Ä–µ–¥–º–µ—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        
        Args:
            item_data: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –ø—Ä–µ–¥–º–µ—Ç–µ
            
        Returns:
            True –µ—Å–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ, False –µ—Å–ª–∏ –ø—Ä–µ–¥–º–µ—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        """
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ü–µ–Ω—ã –≤ —á–∏—Å–ª–∞
                current_price = self._parse_price(item_data.get('price'))
                avg_price = self._parse_price(item_data.get('avg_price'))
                
                cursor.execute('''
                    INSERT OR IGNORE INTO items 
                    (url, title, current_price, avg_price, sales_count, purchase_price, profit_percent)
                    VALUES (?, ?, ?, ?, ?, ?, ?)
                ''', (
                    item_data['url'],
                    item_data['title'],
                    current_price,
                    avg_price,
                    item_data.get('sales_count', 0),
                    0,  # purchase_price –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 0
                    0   # profit_percent –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 0
                ))
                
                if cursor.rowcount > 0:
                    conn.commit()
                    print(f"–ü—Ä–µ–¥–º–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω: {item_data['title']}")
                    return True
                else:
                    print(f"–ü—Ä–µ–¥–º–µ—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {item_data['title']}")
                    return False
                    
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø—Ä–µ–¥–º–µ—Ç–∞: {e}")
            return False
    
    def update_item(self, item_data: Dict[str, Any]) -> bool:
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—Ä–µ–¥–º–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        
        Args:
            item_data: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –ø—Ä–µ–¥–º–µ—Ç–µ
            
        Returns:
            True –µ—Å–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ü–µ–Ω—ã –≤ —á–∏—Å–ª–∞
                current_price = self._parse_price(item_data.get('price'))
                avg_price = self._parse_price(item_data.get('avg_price'))
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç–∞ –∏ —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–∏–±—ã–ª—å
                cursor.execute('''
                    UPDATE items 
                    SET title = ?, current_price = ?, avg_price = ?, 
                        sales_count = ?, updated_at = CURRENT_TIMESTAMP,
                        profit_percent = CASE 
                            WHEN purchase_price > 0 THEN 
                                ((? - purchase_price) / purchase_price) * 100
                            ELSE 0 
                        END
                    WHERE url = ?
                ''', (
                    item_data['title'],
                    current_price,
                    avg_price,
                    item_data.get('sales_count', 0),
                    current_price,  # –î–ª—è —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–∏–±—ã–ª–∏
                    item_data['url']
                ))
                
                if cursor.rowcount > 0:
                    conn.commit()
                    # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    cursor.execute('SELECT current_price, purchase_price, profit_percent FROM items WHERE url = ?', (item_data['url'],))
                    row = cursor.fetchone()
                    if row:
                        current_p, purchase_p, profit_p = row
                        if purchase_p > 0:
                            print(f"üßÆ –†–∞—Å—á–µ—Ç –ø—Ä–∏–±—ã–ª–∏: ({current_p} - {purchase_p}) / {purchase_p} * 100 = {profit_p:.2f}%")
                            print(f"‚úÖ –ü—Ä–∏–±—ã–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {profit_p:.2f}%")
                    
                    print(f"–ü—Ä–µ–¥–º–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω: {item_data['title']}")
                    return True
                else:
                    print(f"–ü—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {item_data['title']}")
                    return False
                    
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–µ–¥–º–µ—Ç–∞: {e}")
            return False
    
    def upsert_item(self, item_data: Dict[str, Any]) -> bool:
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–µ–¥–º–µ—Ç
        
        Args:
            item_data: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –ø—Ä–µ–¥–º–µ—Ç–µ
            
        Returns:
            True –µ—Å–ª–∏ –æ–ø–µ—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞
        """
        # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –¥–æ–±–∞–≤–∏—Ç—å
        if not self.add_item(item_data):
            # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å, –æ–±–Ω–æ–≤–ª—è–µ–º
            return self.update_item(item_data)
        return True
    
    def set_purchase_price(self, url: str, purchase_price: float) -> bool:
        """
        –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ü–µ–Ω—É –∑–∞–∫—É–ø–∫–∏ –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–∞
        
        Args:
            url: URL –ø—Ä–µ–¥–º–µ—Ç–∞
            purchase_price: –¶–µ–Ω–∞ –∑–∞–∫—É–ø–∫–∏
            
        Returns:
            True –µ—Å–ª–∏ –æ–ø–µ—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞
        """
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–µ–Ω—É –∑–∞–∫—É–ø–∫–∏ –∏ —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–∏–±—ã–ª—å
                cursor.execute('''
                    UPDATE items 
                    SET purchase_price = ?, updated_at = CURRENT_TIMESTAMP,
                        profit_percent = CASE 
                            WHEN current_price IS NOT NULL AND ? > 0 THEN 
                                ((current_price - ?) / ?) * 100
                            ELSE 0 
                        END
                    WHERE url = ?
                ''', (purchase_price, purchase_price, purchase_price, purchase_price, url))
                
                if cursor.rowcount > 0:
                    conn.commit()
                    # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    cursor.execute('SELECT current_price, purchase_price, profit_percent FROM items WHERE url = ?', (url,))
                    row = cursor.fetchone()
                    if row:
                        current_p, purchase_p, profit_p = row
                        print(f"üßÆ –†–∞—Å—á–µ—Ç –ø—Ä–∏–±—ã–ª–∏: ({current_p} - {purchase_p}) / {purchase_p} * 100 = {profit_p:.2f}%")
                        print(f"‚úÖ –ü—Ä–∏–±—ã–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {profit_p:.2f}%")
                    
                    print(f"–¶–µ–Ω–∞ –∑–∞–∫—É–ø–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: ${purchase_price}")
                    return True
                else:
                    print("–ü—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    return False
                    
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Ü–µ–Ω—ã –∑–∞–∫—É–ø–∫–∏: {e}")
            return False
    
    def set_purchase_price_by_id(self, item_id: int, purchase_price: float) -> bool:
        """
        –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ü–µ–Ω—É –∑–∞–∫—É–ø–∫–∏ –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–∞ –ø–æ –µ–≥–æ ID.
        
        Args:
            item_id: ID –ø—Ä–µ–¥–º–µ—Ç–∞
            purchase_price: –¶–µ–Ω–∞ –∑–∞–∫—É–ø–∫–∏
            
        Returns:
            True –µ—Å–ª–∏ –æ–ø–µ—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞
        """
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                
                cursor.execute('''
                    UPDATE items 
                    SET purchase_price = ?, updated_at = CURRENT_TIMESTAMP,
                        profit_percent = CASE 
                            WHEN current_price IS NOT NULL AND ? > 0 THEN 
                                ((current_price - ?) / ?) * 100
                            ELSE 0 
                        END
                    WHERE id = ?
                ''', (purchase_price, purchase_price, purchase_price, purchase_price, item_id))
                
                if cursor.rowcount > 0:
                    conn.commit()
                    print(f"–¶–µ–Ω–∞ –∑–∞–∫—É–ø–∫–∏ –¥–ª—è ID {item_id} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: ${purchase_price}")
                    return True
                else:
                    print(f"–ü—Ä–µ–¥–º–µ—Ç —Å ID {item_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    return False
                    
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Ü–µ–Ω—ã –∑–∞–∫—É–ø–∫–∏ –ø–æ ID: {e}")
            return False
    
    def get_all_items(self) -> List[Dict[str, Any]]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ –ø—Ä–µ–¥–º–µ—Ç—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        
        Returns:
            –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –ø—Ä–µ–¥–º–µ—Ç–∞—Ö
        """
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                cursor.execute('''
                    SELECT id, url, title, current_price, avg_price, sales_count, 
                           purchase_price, profit_percent, created_at, updated_at
                    FROM items
                    ORDER BY updated_at DESC
                ''')
                
                columns = [desc[0] for desc in cursor.description]
                items = []
                
                for row in cursor.fetchall():
                    item_dict = dict(zip(columns, row))
                    items.append(item_dict)
                
                return items
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–µ–¥–º–µ—Ç–æ–≤: {e}")
            return []
    
    def get_item_by_url(self, url: str) -> Optional[Dict[str, Any]]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–µ–¥–º–µ—Ç –ø–æ URL
        
        Args:
            url: URL –ø—Ä–µ–¥–º–µ—Ç–∞
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –ø—Ä–µ–¥–º–µ—Ç–µ –∏–ª–∏ None
        """
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                cursor.execute('''
                    SELECT id, url, title, current_price, avg_price, sales_count, 
                           purchase_price, profit_percent, created_at, updated_at
                    FROM items
                    WHERE url = ?
                ''', (url,))
                
                row = cursor.fetchone()
                if row:
                    columns = [desc[0] for desc in cursor.description]
                    return dict(zip(columns, row))
                
                return None
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø—Ä–µ–¥–º–µ—Ç–∞: {e}")
            return None
    
    def get_items_by_url(self, url: str) -> List[Dict[str, Any]]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–µ–¥–º–µ—Ç—ã –ø–æ URL (–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
        
        Args:
            url: URL –ø—Ä–µ–¥–º–µ—Ç–∞
            
        Returns:
            –°–ø–∏—Å–æ–∫ —Å –æ–¥–Ω–∏–º —ç–ª–µ–º–µ–Ω—Ç–æ–º –∏–ª–∏ –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
        """
        item = self.get_item_by_url(url)
        return [item] if item else []
    
    def get_item_by_id(self, item_id: int) -> Optional[Dict[str, Any]]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–µ–¥–º–µ—Ç –ø–æ ID
        
        Args:
            item_id: ID –ø—Ä–µ–¥–º–µ—Ç–∞
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –ø—Ä–µ–¥–º–µ—Ç–µ –∏–ª–∏ None
        """
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                cursor.execute('''
                    SELECT id, url, title, current_price, avg_price, sales_count, 
                           purchase_price, profit_percent, created_at, updated_at
                    FROM items
                    WHERE id = ?
                ''', (item_id,))
                
                row = cursor.fetchone()
                if row:
                    columns = [desc[0] for desc in cursor.description]
                    return dict(zip(columns, row))
                
                return None
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø—Ä–µ–¥–º–µ—Ç–∞ –ø–æ ID: {e}")
            return None
    
    def remove_item(self, item_id: int) -> bool:
        """
        –£–¥–∞–ª—è–µ—Ç –ø—Ä–µ–¥–º–µ—Ç –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        
        Args:
            item_id: ID –ø—Ä–µ–¥–º–µ—Ç–∞
            
        Returns:
            True –µ—Å–ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                
                # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
                cursor.execute('SELECT title FROM items WHERE id = ?', (item_id,))
                row = cursor.fetchone()
                
                if not row:
                    print(f"–ü—Ä–µ–¥–º–µ—Ç —Å ID {item_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    return False
                
                title = row[0]
                
                # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥–º–µ—Ç
                cursor.execute('DELETE FROM items WHERE id = ?', (item_id,))
                
                if cursor.rowcount > 0:
                    conn.commit()
                    print(f"–ü—Ä–µ–¥–º–µ—Ç —É–¥–∞–ª–µ–Ω: {title}")
                    return True
                else:
                    print(f"–ü—Ä–µ–¥–º–µ—Ç —Å ID {item_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    return False
                    
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–µ–¥–º–µ—Ç–∞: {e}")
            return False
    
    def delete_item(self, item_id: int) -> bool:
        """
        –ê–ª–∏–∞—Å –¥–ª—è remove_item –¥–ª—è –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–∏—è API
        
        Args:
            item_id: ID –ø—Ä–µ–¥–º–µ—Ç–∞
            
        Returns:
            True –µ—Å–ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ
        """
        return self.remove_item(item_id)
    
    def _parse_price(self, price_str: Any) -> Optional[float]:
        """
        –ü–∞—Ä—Å–∏—Ç —Å—Ç—Ä–æ–∫—É —Ü–µ–Ω—ã –≤ —á–∏—Å–ª–æ
        
        Args:
            price_str: –°—Ç—Ä–æ–∫–∞ —Å—Ü–µ–Ω–æ–π (–Ω–∞–ø—Ä–∏–º–µ—Ä "$145.25")
            
        Returns:
            –ß–∏—Å–ª–æ –∏–ª–∏ None
        """
        if not price_str:
            return None
            
        try:
            # –£–±–∏—Ä–∞–µ–º —Å–∏–º–≤–æ–ª—ã –≤–∞–ª—é—Ç –∏ –ø—Ä–æ–±–µ–ª—ã
            cleaned = str(price_str).replace('$', '').replace(',', '').strip()
            return float(cleaned)
        except (ValueError, AttributeError):
            return None
    

    
    def print_items_table(self):
        """–í—ã–≤–æ–¥–∏—Ç —Ç–∞–±–ª–∏—Ü—É –≤—Å–µ—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤"""
        items = self.get_all_items()
        
        if not items:
            print("–ù–µ—Ç –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            return
        
        print("\n" + "="*120)
        print("–¢–†–ï–ö–ò–ù–ì –ü–†–ï–î–ú–ï–¢–û–í CS:GO –ú–ê–†–ö–ï–¢–ê")
        print("="*120)
        
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
        print(f"{'ID':<3} {'–ù–∞–∑–≤–∞–Ω–∏–µ':<30} {'–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞':<12} {'–°—Ä–µ–¥. —Ü–µ–Ω–∞':<12} {'–¶–µ–Ω–∞ –∑–∞–∫—É–ø–∫–∏':<12} {'–ü—Ä–∏–±—ã–ª—å %':<10} {'–ü—Ä–æ–¥–∞–∂–∏':<8}")
        print("-"*120)
        
        for item in items:
            title = item['title'][:27] + '...' if len(item['title']) > 30 else item['title']
            current_price = f"${item['current_price']:.2f}" if item['current_price'] else "N/A"
            avg_price = f"${item['avg_price']:.2f}" if item['avg_price'] else "N/A"
            purchase_price = f"${item['purchase_price']:.2f}" if item['purchase_price'] else "N/A"
            profit = f"{item['profit_percent']:.1f}%" if item['profit_percent'] else "0.0%"
            sales = item['sales_count'] if item['sales_count'] else 0
            
            print(f"{item['id']:<3} {title:<30} {current_price:<12} {avg_price:<12} {purchase_price:<12} {profit:<10} {sales:<8}")
        
        print("="*120) 